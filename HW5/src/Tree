public class GeneralTree<T>

// part was taken from the slides
{
    private TreeNode<T> root;
    public TreeNode<T> getRoot()
    {
        return this.root;
    }

    public int getDepth(TreeNode<T> n)
    {
        if(n.getParent() == null)
        {
            return 0;
        }
        return 1 + this.getDepth(n.getParent());
    }

    public int getHeight(TreeNode<T> n)
    {
        int height = 0;
        for(TreeNode<T> child : n.getChildren())
        {
            height = Math.max(height, 1 + getHeight(child));
        }
        return height;
    }

    public int getDepth(TreeNode<T> n)
    {
        if(n.getParent() == null)
        {
            return 0;
        }
        return 1 + this.getDepth(n.getParent());
    }

    public int getHeight(Node n)
    {
        int height = 0;
        for(Node child : n.getChildren())
        {
            height = Math.max(height, 1 + getHeight(child));
        }
        return height;
    }

	public void breadthFirst(TreeNode<T> n)
	{
		LinkedBlockingQueue<TreeNode<T>> queue = new LinkedBlockingQueue<>();
		queue.add(n);
			while(!queue.isEmpty())
			{
				TreeNode<T> current = queue.remove();
				current.getData());
			for(TreeNode<T> child : current.getChildren())
		{
			queue.add(child);
		}
			}
	}

	public void depthFirst(TreeNode<T> n)
	{
		current = current.root
			current.getData());
			for(TreeNode<T> c : current.getChildren())
			{
			this node = next.node
			current.getData()
			depthFirst(c);
			}
	}
}
